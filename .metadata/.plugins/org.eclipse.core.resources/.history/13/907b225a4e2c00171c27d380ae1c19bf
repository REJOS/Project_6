/*
 * MemorySystem.cpp
 *
 *  Created on: Apr 17, 2017
 *      Author: john
 */

/*
 * Includes block
 */
#include <cstdio>
#include <stdlib.h>
#include <cstring>
#include "memorysystem.h"

/*
 * Define Constants
 */
#define BUFFER_SIZE 256
#define MAX_ADDRESSES 100

const char * IN_FILE = "input.txt";
const char * DISK_FILE = "BACKING_STORE";

/*
 * Function: main()
 * Parameters: None
 * Return Type: int
 * Description:
 */
int main() {

	const char *delimiters = ", ";
	char buffer[BUFFER_SIZE];
	char *last_addr;
	u_int_t logic_addr[MAX_ADDRESSES];
	int i = 0;
	int num_addr;
	int result;
	FILE * input;
	input = fopen(IN_FILE, "r");

	// File is invalid
	if (input == NULL) {
		printf("Error: could not read %s", IN_FILE);
		return -1;
	}

	// Valid file, read it in as long as buffer isn't full
	while (fgets(buffer, BUFFER_SIZE, input) != NULL) {

		last_addr = strtok(buffer, delimiters);

		// Populate array with logical address from file
		while (last_addr != NULL) {
			logic_addr[i] = atoi(last_addr);
			//printf("%d", logic_adrr[i]);
			last_addr = strtok(NULL, delimiters);
			i++;
		};
	}
	num_addr = i; // Number of address
	fclose(input); // Close the input file

	tlb_t * tlb;
	result = CreateTLB(tlb); // Create a TLB

	if (tlb == NULL) {
		return -1;
	}

//	page_table_t ** page_table;
//	page_table = (page_table_t **) malloc(sizeof(page_table_t *)); // Create a page table
//
//	if (page_table == NULL) {
//		return -1;
//	}
//
//	result = CreatePageTable(page_table);
//	if (result) {
//		printf("Error: Could not create page table.");
//		return -1;
//	}
//
//	// Obtain the page number and offset for each address,
//	// then search for them in the page table.
//	for (i = 0; i < num_addr; i++) {
//		bool *hit = (bool *) malloc(sizeof(bool));
//		char ** frames = (char **) malloc(sizeof(char *));
//		u_int_t page_num = ParsePageNum(logic_addr[i]);
//		u_int_t offset = ParseOffset(logic_addr[i]);
//		*hit = false;
//		//SearchTLB(page_num, tlb, hit, frames);
//		if (*hit == false) {
//			SearchPageTable(page_num, *page_table, hit, frames);
//			if (*hit == false) {
//				printf("no hit for %d\n", page_num);
//				PageFaultHandler(page_num, DISK_FILE, *page_table, tlb);
//			}
//		}
//	}

	return 0;
}

/*
 * Function: CreateTLB()
 * Parameters: tlb_t *tlb
 * Return Type: int
 * Description:
 */
int CreateTLB(tlb_t *tlb) {
	// Assign memory to the tlb
	tlb = (tlb_t *) malloc(sizeof(tlb_t));

	if (tlb == NULL) {
		return -1;
	}

	int i;
	for (i = 0; i < TLB_SIZE; i++) {
		tlb->list[i] = NULL;
	}

	tlb->size = 0;

	return 0;
}

/*
 * Function: SearchTLB()
 * Parameters: u_int_t page_num
 *             tlb_t * tlb
 *             bool *is_tlb_hit
 *             char **frames
 * Return Type: int
 * Description:
 */
int SearchTLB(u_int_t page_num, tlb_t * tlb, bool *is_tlb_hit, char **frames) {

	if (tlb->size > 0) {
		for (int i = 0; i < tlb->size; i++) {
			if (tlb->list[i]->page_num == page_num) {
				*is_tlb_hit = true;
				*frames = tlb->list[i]->frames;
			}
		}
	}
	*is_tlb_hit = false;
	*frames = NULL;

	return 0;
}

/*
 * Function: CreatePageTable()
 * Parameters: page_table_t *page_table
 * Return Type: int
 * Description:
 */
int CreatePageTable(page_table_t **page_table) {

	(*page_table) = (page_table_t *) malloc(sizeof(page_table_t));

	if ((*page_table) == NULL) {
		return -1;
	}

	int i;
	for (i = 0; i < NUM_PAGES; i++) {
		(*page_table)->list[i] = (page_t *) malloc(sizeof(page_t));
		if ((*page_table)->list[i] == NULL) {
			return -1;
		}
		(*page_table)->list[i]->frames = NULL;
	}
	(*page_table)->num_entries = 0;

	return 0;
}

/*
 * Function: SearchPageTable()
 * Parameters: u_int_t page_num
 *             page_table_t * page_table
 bool *is_page_hit
 char **frames
 * Return Type: int
 * Description:
 */
int SearchPageTable(u_int_t page_num, page_table_t * page_table,
		bool *is_page_hit, char **frames) {

	if (page_table->list[page_num]->frames == NULL) {
		*frames = NULL;
		*is_page_hit = false;
		return 0;
	}

	*frames = page_table->list[page_num]->frames;

	*is_page_hit = true;

	return 0;
}

/*
 * Function: PageFaultHandler()
 * Parameters: u_int_t page_num
 const char * phys_mem_filename
 page_table_t *page_table
 tlb_t *tlb
 * Return Type: int
 * Description:
 */
int PageFaultHandler(u_int_t page_num, const char * phys_mem_filename,
		page_table_t *page_table, tlb_t *tlb) {

	page_t * new_page = (page_t *) malloc(sizeof(page_t));

	if (new_page == NULL) {
		return -2;
	}

	new_page->frames = (char *) malloc(sizeof(char) * PAGE_SIZE);

	if (new_page->frames == NULL) {
		return -2;
	}

	FILE * disk;
	disk = fopen(phys_mem_filename, "rb");
	if (disk == NULL) {
		printf("Error: could not read %s", phys_mem_filename);
		return -1;
	}

	fseek(disk, page_num * PAGE_SIZE, SEEK_SET);

	fread(new_page->frames, 1, 256, disk);

	fclose(disk);

	//page_table->list[page_num] = new_page;

	return 0;
}

/*
 * Function: ParsePageNum()
 * Parameters: u_int_t logical_addr
 * Return Type: u_int_t
 * Description: Take the logical address and
 *              returns the page number of the
 *              address.
 */
u_int_t ParsePageNum(u_int_t logical_addr) {
	return (logical_addr & PAGE_MASK) >> PAGE_SHIFT;
}

/*
 * Function: ParseOffset()
 * Parameters: u_int_t logical_addr
 * Return Type: u_int_t
 * Description: Takes the logical address and
 *              returns the offset of the address.
 */
u_int_t ParseOffset(u_int_t logical_addr) {
	return (logical_addr & OFFSET_MASK);
}
